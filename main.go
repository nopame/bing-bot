package main

import (
	"fmt"
	"log"
	"os"
	"sync"
	"time"

	"scraper-bing/config"
	"scraper-bing/getkeyword"
	"scraper-bing/search"
	"scraper-bing/utils"
)

func main() {
	// ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ENV ‡πÉ‡∏´‡πâ playwright-go ‡πÉ‡∏ä‡πâ browser ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô container
	os.Setenv("PLAYWRIGHT_BROWSERS_PATH", "/ms-playwright")
	os.Setenv("PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD", "1")

	utils.PrintDivider()
	fmt.Printf("\U0001F680 Starting Bing Scraper | Max Workers: %d | Queue Size: %d\n", config.MaxConcurrentJobs, config.QueueSize)

	// ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Browser ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
	err := search.InitBrowser()
	if err != nil {
		log.Fatalf("‚ùå Failed to initialize browser: %v", err)
	}
	defer search.CloseBrowser()

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Queue ‡πÅ‡∏•‡∏∞ ActiveJobs
	queue := make(chan getkeyword.KeywordData, config.QueueSize)
	activeJobs := &sync.Map{}
	var wg sync.WaitGroup

	// ‚úÖ Fetch Jobs ‡πÉ‡∏´‡πâ Queue ‡πÄ‡∏ï‡πá‡∏°‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
	go func() {
		for {
			fmt.Println("[Trigger] üîÑ FetchKeywords()...")
			getkeyword.FetchKeywords(queue, activeJobs)
			time.Sleep(2 * time.Second)
		}
	}()

	// ‚úÖ ‡πÉ‡∏ä‡πâ Worker Pool ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ Worker
	workerPool := make(chan struct{}, config.MaxConcurrentJobs)

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Worker ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
	for i := 0; i < config.MaxConcurrentJobs; i++ {
		workerPool <- struct{}{}
		wg.Add(1)

		go func(workerID int) {
			defer wg.Done()
			for {
				select {
				case job := <-queue: // ‚úÖ ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Queue
					fmt.Printf("‚úÖ Worker %d received job: %s (ID: %d)\n", workerID, job.Query, job.ID)
					<-workerPool // ‚úÖ ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Worker Pool

					fmt.Printf("üõ†Ô∏è Worker %d processing: %s (ID: %d)\n", workerID, job.Query, job.ID)
					if err := search.SearchBing(&job); err != nil {
						log.Printf("‚ùå Worker %d failed: %v\n", workerID, err)
					}

					// ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å ActiveJobs
					activeJobs.Delete(job.ID)

					// ‚úÖ ‡∏Ñ‡∏∑‡∏ô Worker Slot ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
					workerPool <- struct{}{}

				default:
					time.Sleep(500 * time.Millisecond) // ‚úÖ ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ CPU 100%
				}
			}
		}(i)
	}

	// ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ Worker ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
	wg.Wait()
	fmt.Println("üéâ All tasks completed!")
	utils.PrintDivider()
}
